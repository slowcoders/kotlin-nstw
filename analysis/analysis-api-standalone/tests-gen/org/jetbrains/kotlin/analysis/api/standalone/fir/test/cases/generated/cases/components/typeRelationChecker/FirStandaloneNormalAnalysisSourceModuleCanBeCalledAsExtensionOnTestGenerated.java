/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.standalone.fir.test.cases.generated.cases.components.typeRelationChecker;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.kotlin.analysis.api.standalone.fir.test.configurators.AnalysisApiFirStandaloneModeTestConfiguratorFactory;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfiguratorFactoryData;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfigurator;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.TestModuleKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.FrontendKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisSessionMode;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiMode;
import org.jetbrains.kotlin.analysis.api.impl.base.test.cases.components.typeRelationChecker.AbstractCanBeCalledAsExtensionOnTest;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn")
@TestDataPath("$PROJECT_ROOT")
public class FirStandaloneNormalAnalysisSourceModuleCanBeCalledAsExtensionOnTestGenerated extends AbstractCanBeCalledAsExtensionOnTest {
  @NotNull
  @Override
  public AnalysisApiTestConfigurator getConfigurator() {
    return AnalysisApiFirStandaloneModeTestConfiguratorFactory.INSTANCE.createConfigurator(
      new AnalysisApiTestConfiguratorFactoryData(
        FrontendKind.Fir,
        TestModuleKind.Source,
        AnalysisSessionMode.Normal,
        AnalysisApiMode.Standalone
      )
    );
  }

  @Test
  @TestMetadata("actualReceiverWithStarProjection.kt")
  public void testActualReceiverWithStarProjection() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/actualReceiverWithStarProjection.kt");
  }

  @Test
  public void testAllFilesPresentInCanBeCalledAsExtensionOn() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn"), Pattern.compile("^(.+)\\.kt$"), null, true);
  }

  @Test
  @TestMetadata("boundedActualReceiver.kt")
  public void testBoundedActualReceiver() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/boundedActualReceiver.kt");
  }

  @Test
  @TestMetadata("boundedActualReceiverWithInapplicableBounds.kt")
  public void testBoundedActualReceiverWithInapplicableBounds() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/boundedActualReceiverWithInapplicableBounds.kt");
  }

  @Test
  @TestMetadata("boundedExtensionReceiverParameter.kt")
  public void testBoundedExtensionReceiverParameter() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/boundedExtensionReceiverParameter.kt");
  }

  @Test
  @TestMetadata("completelyDifferentTypes.kt")
  public void testCompletelyDifferentTypes() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/completelyDifferentTypes.kt");
  }

  @Test
  @TestMetadata("extensionFunctionWithVariance.kt")
  public void testExtensionFunctionWithVariance() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/extensionFunctionWithVariance.kt");
  }

  @Test
  @TestMetadata("extensionProperty.kt")
  public void testExtensionProperty() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/extensionProperty.kt");
  }

  @Test
  @TestMetadata("extensionReceiverWithStarProjection.kt")
  public void testExtensionReceiverWithStarProjection() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/extensionReceiverWithStarProjection.kt");
  }

  @Test
  @TestMetadata("extensionsRecursiveGenericsWithInProjection.kt")
  public void testExtensionsRecursiveGenericsWithInProjection() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/extensionsRecursiveGenericsWithInProjection.kt");
  }

  @Test
  @TestMetadata("genericParameterReceiver.kt")
  public void testGenericParameterReceiver() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/genericParameterReceiver.kt");
  }

  @Test
  @TestMetadata("genericReceiversWithDifferentArguments.kt")
  public void testGenericReceiversWithDifferentArguments() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/genericReceiversWithDifferentArguments.kt");
  }

  @Test
  @TestMetadata("notExtension.kt")
  public void testNotExtension() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/notExtension.kt");
  }

  @Test
  @TestMetadata("recursiveTypeParametersInExtensionNotUsedInReceivers.kt")
  public void testRecursiveTypeParametersInExtensionNotUsedInReceivers() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/recursiveTypeParametersInExtensionNotUsedInReceivers.kt");
  }

  @Test
  @TestMetadata("recursiveTypealiasedBounds.kt")
  public void testRecursiveTypealiasedBounds() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/recursiveTypealiasedBounds.kt");
  }

  @Test
  @TestMetadata("sameTypeOfReceivers.kt")
  public void testSameTypeOfReceivers() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/sameTypeOfReceivers.kt");
  }

  @Test
  @TestMetadata("simpleInvariantCase.kt")
  public void testSimpleInvariantCase() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/simpleInvariantCase.kt");
  }

  @Test
  @TestMetadata("simpleOutVariance.kt")
  public void testSimpleOutVariance() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/simpleOutVariance.kt");
  }

  @Test
  @TestMetadata("simpleSubclass.kt")
  public void testSimpleSubclass() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/simpleSubclass.kt");
  }

  @Test
  @TestMetadata("twoReceiverWithStarProjection.kt")
  public void testTwoReceiverWithStarProjection() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/twoReceiverWithStarProjection.kt");
  }

  @Test
  @TestMetadata("typeAliasedActualReceiver.kt")
  public void testTypeAliasedActualReceiver() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/typeAliasedActualReceiver.kt");
  }

  @Test
  @TestMetadata("typeAliasedExpectedReceiver.kt")
  public void testTypeAliasedExpectedReceiver() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/typeAliasedExpectedReceiver.kt");
  }

  @Test
  @TestMetadata("typeAliasedReceivers.kt")
  public void testTypeAliasedReceivers() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/typeAliasedReceivers.kt");
  }

  @Test
  @TestMetadata("typealiasesWithVarianceAndStarProjections.kt")
  public void testTypealiasesWithVarianceAndStarProjections() {
    runTest("analysis/analysis-api/testData/components/typeRelationChecker/canBeCalledAsExtensionOn/typealiasesWithVarianceAndStarProjections.kt");
  }
}
